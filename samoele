traderepository

public Stream<SDMTrade> getDailyConfStatementConfirmationData(LocalDate businessDate, List<Long> inputIDs,
			String summary, String reportingLevel, String runID, String footerName) throws SQLException {
		String queryFileName = "dailyConfStatement_confirmation_" + reportingLevel;
		
		if("full".equals(summary)){
			queryFileName = queryFileName + "_summary";
		}
		
		Map<String, Object> params = new HashMap<>();
		params.put("businessDate", businessDate);

		String query = repo.get(queryFileName);
		if (runID != null && !(runID.isEmpty() || runID.isBlank())) {
			query = query.replace(":inputIDs", "select INPUTID from DS_INPUTIDS where ID = :runID");
			params.put("runID", runID);
		} else {
			params.put("inputIDs", inputIDs);
		}

		if(!dbType.equals(DBType.ORACLE)){
			List<SDMTrade> temp = new ArrayList<SDMTrade>();
			return temp.stream();
		}

		return sq.toStream(new SQLQuery(SQLTransformer.transform(dbType, query), params), rs -> {
			SDMTrade r = new SDMTrade();
			r.setId(rs.getLong("tradeID"));
			r.setInputID(rs.getLong("inputID"));
			r.setReportingLevel(reportingLevel);
			r.setInstrumentId(rs.getLong("instrumentId"));
			r.setProductId(rs.getLong("productId"));
			r.setActivityType(rs.getString("activityType"));
			

			r.setTradeDate(rs.getDate("tradeDate").toLocalDate());
			r.setOrderId(rs.getString("orderId"));
			
			if ("BUY".equals(rs.getString("direction"))) {
				r.setBuyQty(rs.getLong("quantity"));
				r.setBuyQtyIntoTradePrice(
						BigDecimal.valueOf(rs.getLong("quantity")).multiply(rs.getBigDecimal("price")));
			} else {
				r.setSellQty(rs.getLong("quantity"));
				r.setSellQtyIntoTradePrice(
						BigDecimal.valueOf(rs.getLong("quantity")).multiply(rs.getBigDecimal("price")));
			}

			String contractDesc = null;
			if ("YES".equals(rs.getString("uselookalikeattribute"))) {
				contractDesc = rs.getString("StatementDescription");
			} else {
				contractDesc = rs.getString("ExchangeName") + " " + rs.getString("Description");
			}
			contractDesc = contractDesc + " " + (rs.getInt("FLEXIBLE") == 1 ? rs.getString("MaturityDate")
					: rs.getString("MonthMaturityDate"));

			if ("OPTION".equals(rs.getString("productType"))) {
				r.setInstrumentStrikePrice(rs.getBigDecimal("StrikePrice"));
				contractDesc = contractDesc + " " + r.getFormattedInstrumentStrikePrice() + " "
						+ rs.getString("optionType");
			}

			r.setContractDescription(contractDesc);
			
			r.setDisplayTradePrice(rs.getString("displayPrice"));

			if (rs.getLong("RESULTOFEXERCISEASSIGNMENT") == 1) {
				r.setResultOfEADesc("RESULT OF AN EXERCISE/ASSIGNMENT");
			}
			
			if ("2_giveIn".equals(r.getActivityType())) {
				r.setResultOfEADesc(rs.getString("sendingFirmDetails"));
			}

			r.setRegCategoryName(rs.getString("NAME"));

			r.setCommissionCurrency(rs.getString("commissionCurrency"));

			r.setOptionPremiumCurrency(rs.getString("optionPremiumCurrency"));
			

			r.setNfaFeeCurrency(rs.getString("nfaFeeCurrency"))
					.setExchangeFeeCurrency(rs.getString("exchangeFeeCurrency"))
					.setClearingFeeCurrency(rs.getString("clearingFeeCurrency"))
					.setGiveInFeeCurrency(rs.getString("giveInFeeCurrency"))
					.setBrokerageGiveUpFeeCurrency(rs.getString("brokerageGiveUpFeeCurrency"))
					.setExchangeGiveUpFeeCurrency(rs.getString("exchangeGiveUpFeeCurrency"))
					.setPitBrokerageFeeCurrency(rs.getString("pitBrokerageFeeCurrency"))
					.setExecutionCommissionFeeCurrency(rs.getString("executionCommissionFeeCurrency"))
					.setClearingCommissionFeeCurrency(rs.getString("clearingCommissionFeeCurrency"))
					.setBrokerCommissionFeeCurrency(rs.getString("brokerCommissionFeeCurrency"));

			BigDecimal mulFactor = new BigDecimal("-1");
			double mulFactorDouble = 1.0;

			if("4_cancelled".equals(r.getActivityType())){
				mulFactor = mulFactor.multiply(mulFactor);
				r.setBuyQtyIntoTradePrice(new BigDecimal("0"));
				r.setSellQtyIntoTradePrice(new BigDecimal("0"));
				
				mulFactorDouble = mulFactorDouble*-1.0;
			}
			
			r.setOptionPremiumAmount(rs.getDouble("value")*mulFactorDouble);
			r.setCommissionAmount(rs.getBigDecimal("commissionAmount").multiply(mulFactor));
			r.setSumNFAFeeAmount(rs.getBigDecimal("sumNFAFeeAmount").multiply(mulFactor))
					.setSumExchangeFeeAmount(rs.getBigDecimal("sumexchangeFeeAmount").multiply(mulFactor))
					.setSumClearingFee(rs.getBigDecimal("sumClearingFee").multiply(mulFactor))
					.setSumGiveInFee(rs.getBigDecimal("sumGiveInFee").multiply(mulFactor))
					.setSumBrokerageGiveUpAmountFee(rs.getBigDecimal("sumBrokerageGiveUpAmountFee").multiply(mulFactor))
					.setSumExchangeGiveUpAmountFee(rs.getBigDecimal("sumExchangeGiveUpAmountFee").multiply(mulFactor))
					.setSumPitBrokerageAmountFee(rs.getBigDecimal("sumPitBrokerageAmountFee").multiply(mulFactor))
					.setSumExecutionCommissionAmountFee(rs.getBigDecimal("sumExecutionCommissionAmountFee").multiply(mulFactor))
					.setSumClearingCommissionAmountFee(rs.getBigDecimal("sumClearingCommissionAmountFee").multiply(mulFactor))
					.setSumBrokerCommissionAmountFee(rs.getBigDecimal("sumBrokerCommissionAmountFee").multiply(mulFactor));
			
			
			 if(!"full".equals(summary))
             {
             	  String tradeTypeIds = rs.getString("trdTypes");
                   BusinessRepository businessRepo = new BusinessRepository(dbType, dataSource);
                   String tradeTypes =Utils.getCommaSeperatedTradeTypes(businessRepo.getTradeTypeMap(), tradeTypeIds) ;
                   r.setTradeType(tradeTypes);
             }

			 if("counterPartyAccount".equals(reportingLevel)) {
				 r.setCommissionAmount(new BigDecimal("0"));
			 }

            String tradeTypeIds = rs.getString("trdTypes");
            BusinessRepository businessRepo = new BusinessRepository(dbType, dataSource);
            String tradeTypes =Utils.getCommaSeperatedTradeTypes(businessRepo.getTradeTypeMap(), tradeTypeIds) ;
            FooterRepository footerRepository = new FooterRepository(dbType, dataSource);
            String footerop = footerRepository.footerRepository(footerName,"dev");
            if(rs.getString("ExchangeName").equals("XLME") && tradeTypes.contains("OTC")){
                r.SetFooterNote(footerop);
            }
            else if(rs.getString("ExchangeName").equals("XLME")){
                r.SetFooterNote(footerop);
            }
			return r;
		});
	}
  
  
  ************************************************************************
  TradeEntryPoint.java
  @Authorization(entitlements = "IH_API_PUBLIC")
  @POST
  @Path("dailyConfStatement/confirmation")
  @PRD(name = "Daily Conf Statement - confirmation")
  @Produces({WSTypes.TEXT_CSV})
  @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
  @Output(
          fields = {
       		   "inputID",
               "id",
               "reportingLevel",
               "instrumentId",
               "productId",
               "activityType",
               
               "tradeDate",
               "orderId",
               "buyQty",
		       "sellQty",
		       "buyQtyIntoTradePrice",
		       "sellQtyIntoTradePrice",
               "contractDescription",
               "displayTradePrice",
               "tradeType",
               "resultOfEADesc",
               
               "regCategoryName",
               
               "optionPremiumCurrency",
               "optionPremiumAmount",
               
               "commissionCurrency",
               "commissionAmount",
               
               "nfaFeeCurrency",
               "exchangeFeeCurrency",
               "clearingFeeCurrency",
               "giveInFeeCurrency",
               "brokerageGiveUpFeeCurrency",
               "exchangeGiveUpFeeCurrency",
               "pitBrokerageFeeCurrency",
               "executionCommissionFeeCurrency",
               "clearingCommissionFeeCurrency",
               "brokerCommissionFeeCurrency",
               
               "sumNFAFeeAmount",
               "sumExchangeFeeAmount",
               "sumClearingFee",
               "sumGiveInFee",
               "sumBrokerageGiveUpAmountFee",
               "sumExchangeGiveUpAmountFee",
               "sumPitBrokerageAmountFee",
               "sumExecutionCommissionAmountFee",
               "sumClearingCommissionAmountFee",
               "sumBrokerCommissionAmountFee",
               "footerdescription"

//               "footerNote"
          },
          output = {
                  @Field(name="inputID", type = Long.class),
                  @Field(name="ID", type = Long.class),
                  @Field(name="reportingLevel", type = String.class),
                  @Field(name="instrumentId", type = Long.class),
                  @Field(name="productId", type = Long.class),
                  @Field(name="activityType", type = String.class),
                  
                  @Field(name="tradeDate", type = LocalDate.class),
                  @Field(name="orderId"),
                  @Field(name="buyQty", type = Long.class),
		          @Field(name="sellQty", type = Long.class),
 		          @Field(name="buyQtyIntoTradePrice", type = BigDecimal.class),
		          @Field(name="sellQtyIntoTradePrice", type = BigDecimal.class),
                  @Field(name="contractDescription"),
                  @Field(name="displayTradePrice"),
                  @Field(name="tradetype"),
                  @Field(name="resultOfEADesc"),
                  
                  @Field(name="regCategoryName"),
                  
                  @Field(name="optionPremiumCurrency"),
                  @Field(name="optionPremiumAmount", type= Double.class),
                  
                  @Field(name="commissionCurrency"),
                  @Field(name="commissionAmount", type= BigDecimal.class),
                  
                  @Field(name="NFAFeeCurrency"),
                  @Field(name="ExchangeFeeCurrency"),
                  @Field(name="ClearingFeeCurrency"),
                  @Field(name="GiveInFeeCurrency"),
                  @Field(name="BrokerageGiveUpFeeCurrency"),
                  @Field(name="ExchangeGiveUpFeeCurrency"),
                  @Field(name="PitBrokerageFeeCurrency"),
                  @Field(name="ExecutionCommissionFeeCurrency"),
                  @Field(name="ClearingCommissionFeeCurrency"),
                  @Field(name="BrokerCommissionFeeCurrency"),
                  
                  @Field(name="sumNFAFeeAmount", type= BigDecimal.class),
                  @Field(name="sumExchangeFeeAmount", type= BigDecimal.class),
                  @Field(name="sumClearingFee", type= BigDecimal.class),
                  @Field(name="sumGiveInFee", type= BigDecimal.class),
                  @Field(name="sumBrokerageGiveUpAmountFee", type= BigDecimal.class),
                  @Field(name="sumExchangeGiveUpAmountFee", type= BigDecimal.class),
                  @Field(name="sumPitBrokerageAmountFee", type= BigDecimal.class),
                  @Field(name="sumExecutionCommissionAmountFee", type= BigDecimal.class),
                  @Field(name="sumClearingCommissionAmountFee", type= BigDecimal.class),
                  @Field(name="sumBrokerCommissionAmountFee", type= BigDecimal.class),

                  //@Field(name="footerName", type= String.class),
                  @Field(name="footerdescription", type= String.class)
          })
  public Stream<SDMTrade> getDailyConfStatementConfirmationData(
		@Context HttpServletRequest request,
		@NotNull @FormParam("businessDate") LocalDate businessDate, 
		@NotNull @FormParam("inputIDs") List<Long> inputIDs, 
		@NotNull @FormParam("simulation") boolean simulation, 
		@NotNull @FormParam("summary") String summary,
		@NotNull @FormParam("reportingLevel") String reportingLevel,
        @FormParam("footer") String footerName
        //@FormParam("footer") String footerDescription
		) throws DataException {
    try {
	String wsPath = "dailyConfStatement/confirmation";
	String runID = request.getHeader("X-RunID");
	logger.trace("request received to WS {} for businessDate: {} inputIDs: {} summary: {} reportingLevel: {}", wsPath, businessDate, inputIDs, summary, reportingLevel);
        long startTimeInMillis = System.currentTimeMillis();
	Stream<SDMTrade> result = (simulation
              ? tradeRepositorySimulation.getDailyConfStatementConfirmationData(businessDate, inputIDs, summary, reportingLevel, runID)
              : tradeRepository.getDailyConfStatementConfirmationData(businessDate, inputIDs, summary, reportingLevel, runID));
	long endTimeInMillis = System.currentTimeMillis();
	logger.trace("response generated from WS {} for businessDate: {} inputIDs: {} summary: {} reportingLevel: {}", wsPath, businessDate, inputIDs, summary, reportingLevel);
	logger.trace("WS: {} returned response in {} ms for ", wsPath, (endTimeInMillis - startTimeInMillis));
	return result;
	 } catch (SQLStreamingException | SQLException e) {
      logger.error("An error has occurred when fetching SDMTrades", e);
      throw new DataException("An error occurred", e);
    }
  }
  
  footerrepository.java
  public class FooterRepository {
    private DataSource dataSource;
    private SQLRepository repo;
    private SQLStream sq;
    private static final String SQL_RESOURCE_FOLDER = "reportSetup" + "/" + "footer";


    @Deprecated
    public FooterRepository(DataSource ds) throws IOException {
        this(ds instanceof FakeDataSource ? DBType.POSTGRESQL : ((MonitoringDataSource)ds).getType(), ds);
    }

    public FooterRepository(DBType type, DataSource ds) throws IOException {
        this.dataSource = ds;
        this.repo = new SQLRepository(SQL_RESOURCE_FOLDER);
        sq = new SQLStream(dataSource);
    }

    public Stream<FooterStatement> getFooterStatement(String footer, String tenant) throws SQLException {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("footer", footer);
        map.put("tenant", tenant);
        String query = repo.get("footer");
        System.out.println("footer name "+footer);
        return sq.toStream(
                new SQLQuery(query, map),
                rs -> {
                    FooterStatement footerStatement = new FooterStatement();
                    footerStatement.setContent(rs.getString("content"));
                    System.out.println("content"+content);
                    return footerStatement;
                });
    }
}

*******************************************************************************************
footerstatement.java
package com.fis.ptd.plugin.api.reportSetup.footer.model;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@ToString
@AllArgsConstructor
@NoArgsConstructor
public class FooterStatement {
    private String content;
}
*********************************************************************************
footer.sql
SELECT CONTENT
FROM DM_FOOTER
WHERE NAME = :footer AND TENANT = :tenant
