package com.fis.ptp.fiscd.charge.integration.hub;

import com.fis.ptd.fiscd.charges.proto.api.EntityChargeData;
import com.fis.ptp.fiscd.charges.exceptions.DeserializationException;
import com.google.protobuf.InvalidProtocolBufferException;
import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.ByteArrayDeserializer;
import org.apache.kafka.common.serialization.ByteArraySerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.time.Duration;
import java.util.Arrays;
import java.util.Properties;
import java.util.Properties;

public class IntegrationHubConsumer {
    public static void main(String[] args) throws InvalidProtocolBufferException {
//        String BOOTSTRAP_SERVER_PROPERTY = "charges.integration.hub.plugin.kafka.bootstrap-servers";
        String BOOTSTRAP_SERVER_PROPERTY = "10.7.177.175:9092";
        String IH_EVENT_TOPIC_PROPERTY = "charges.integration.hub.plugin.kafka.producers.ih-events.topic";
        String SASL_MECHANISM_PROPERTY = "charges.integration.hub.plugin.kafka.security.sasl-mechanism";
        String SECURITY_PROTOCOL = "charges.integration.hub.plugin.kafka.security.security-protocol";
        String SASL_JAAS_CONFIG = "charges.integration.hub.plugin.kafka.security.sasl-jaas-config";
        String grp_id = "charges.integration.hub.plugin.kafka.producers.grp-id.grpid";

        Logger logger = LoggerFactory.getLogger(IntegrationHubConsumer.class.getName());
        long startTime = System.currentTimeMillis();

        //Creating consumer properties
        Properties properties = new Properties();
        Config conf = ConfigFactory.load();

        properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, BOOTSTRAP_SERVER_PROPERTY);
        properties.setProperty("sasl.mechanism", conf.getString(SASL_MECHANISM_PROPERTY));
        properties.setProperty("security.protocol", conf.getString(SECURITY_PROTOCOL));
        properties.setProperty("sasl.jaas.config", conf.getString(SASL_JAAS_CONFIG));
        properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class.getName());
        properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class.getName());
        properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, conf.getString(grp_id));
        properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
        //creating consumer
        KafkaConsumer<byte[], byte[]> consumer = new KafkaConsumer<byte[], byte[]>(properties);
        //Subscribing
        consumer.subscribe(Arrays.asList(conf.getString(IH_EVENT_TOPIC_PROPERTY)));
        //polling
        while ((System.currentTimeMillis() - startTime) < 550000) {
            try {
                ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofSeconds(2));
                logger.info("Reading messages: {}", records.count());
                if (records.count() != 0) {
                    for (ConsumerRecord<byte[], byte[]> record : records) {
                        EntityChargeData.EntityCharge entityCharge = EntityChargeData.EntityCharge.parseFrom(record.value());
                        logger.info(entityCharge.toString());
                    }
                }
            } catch (Exception e) {
                logger.error("Unable to read kafka message! Exception for topic: {}.", IH_EVENT_TOPIC_PROPERTY, e);

            }
        }
    }
}
