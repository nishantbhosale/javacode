select
    sum(coalesce(bQty, 0 )) as bQty,
    sum(coalesce(sQty, 0 )) as sQty,
    cast(businessDate as date)businessDate,
    contractDescription,
    LEGEND,
    tradePriceCurCode,
    optionPremiumRegCategory,
    sum(costOrProceeds) as costOrProceeds

from
	(

	/*Confirmation*/

	SELECT
		MAX(0) AS init,
		max(CASE WHEN trade.direction='BUY' THEN trade.quantity END) AS bQty,
		max(CASE WHEN trade.direction='SELL' THEN trade.quantity END) AS sQty,
		max(trade.ENTITYBUSINESSDATE) as businessDate,
 		MAX(
        CASE
        WHEN product.PRODUCTTYPE = 'FUTURE'
        THEN ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') )
        ELSE ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') || ' ' || COALESCE(instrument.STRIKEPRICE,0.0) || ' ' || COALESCE(instrument.OPTIONTYPE,''))
        END) AS contractDescription,
		'Trade' AS LEGEND,
		MAX(COALESCE(chargecurrency,currencys.CODE)) AS tradePriceCurCode,
		MAX(regcat.NAME) AS optionPremiumRegCategory,
		/*(MAX(CASE WHEN product.OPTIONSETTLEMENTMETHOD = 'PREMIUM' AND product.PRODUCTTYPE = 'OPTION' AND chargecurrency=currencys.CODE THEN valuation.VALUE ELSE 0 END) - sum(chargeAmount)
		) as costOrProceeds,*/

		(CASE WHEN (SUM(chargeAmount) = 0)
			THEN (MAX(CASE WHEN product.OPTIONSETTLEMENTMETHOD = 'PREMIUM' AND product.PRODUCTTYPE = 'OPTION' THEN valuation.VALUE ELSE 0 END))
			ELSE (MAX(CASE WHEN product.OPTIONSETTLEMENTMETHOD = 'PREMIUM' AND product.PRODUCTTYPE = 'OPTION' AND chargecurrency=currencys.CODE THEN valuation.VALUE ELSE 0 END)- sum(chargeAmount))
            END )  as costOrProceeds
	FROM
		(
			SELECT
				tradein.ID as ID,
				DMCF.CURRENCYCODE as chargecurrency,
				MAX(tradein.ENTITYBUSINESSDATE) as ENTITYBUSINESSDATE,
				MAX(tradein.INSTRUMENT) as INSTRUMENT,
				MAX(tradein.DIRECTION) AS direction,
				MAX(tradein.QUANTITY) AS quantity,
				MAX(tradein.TRADEDATE) AS tradeDate,
				MAX(tradein.DISPLAYPRICE) AS displayTradePrice,
				max(tradein.PRICE) AS tradePrice ,
				MAX(tradein.EXCHANGENAME) AS EXCHANGENAME,
				MAX(tradein.ORDERID) AS OrderId,
				MAX(tradein.REGULATORYCATEGORYNAME) as REGULATORYCATEGORYNAME,
				MAX(tradein.PARTYACCOUNT) as PARTYACCOUNT,
				MAX(tradein.tenant) as tenant,
				MAX(tradein.EXCHANGE) as EXCHANGEID,
				MAX(tradein.REGULATORYCATEGORY) as REGULATORYCATEGORY,
				MAX(tradein.USELOOKALIKEATTRIBUTE) as USELOOKALIKEATTRIBUTE,
				MAX(tradein.RESULTOFEXERCISEASSIGNMENT) as RESULTOFEXERCISEASSIGNMENT,
				MAX(tradein.OPENQUANTITY) as OPENQUANTITY,

				(CASE WHEN (DMCF.TYPE) in ('FEE', 'COM') THEN (sum(COALESCE(DMCF.AMOUNT,0))) ELSE 0 END) AS chargeAmount,
				(CASE WHEN (DMCF.TYPE) = 'COM' THEN (sum(COALESCE(DMCF.AMOUNT,0))) ELSE 0 END) AS commissionAmount,
				(CASE WHEN (DMCF.TYPE) = 'FEE' THEN (sum(COALESCE(DMCF.AMOUNT,0))) ELSE 0 END) AS feeAmount

			from DM_DAILYHISTORY_TRADE tradein
				 JOIN DM_DAILYHISTORY_TRADEPROCESSING tradeprocessing ON tradeprocessing.TRADEID = tradein.ID AND tradeprocessing.STARTDATE = tradein.STARTDATE AND tradeprocessing.tenant = tradein.tenant AND tradeprocessing.CLEARINGSTATUS='CLEARED'
				 LEFT JOIN DM_COMMISSIONFEE_HISTORY DMCF ON DMCF.ENTITYID = tradein.ID AND  DMCF.ROOTCAUSEENTITYTYPE='Trade' AND DMCF.ENTITYBUSINESSDATE = tradein.ENTITYBUSINESSDATE AND tradein.TENANT = DMCF.TENANT AND DMCF.AMOUNT <> 0 AND DMCF.CHARGEREALIZATIONSTATUS = 'CHARGED' AND ( DMCF.ENDDATE is NULL or DMCF.ENDDATE <> DMCF.STARTDATE )
				 LEFT JOIN DM_CHARGELABELDEFINITION chargeLabelDef ON (chargeLabelDef.TENANT = DMCF.TENANT AND chargeLabelDef.id = DMCF.CHARGELABELDEFINITION )
				 LEFT JOIN DM_CHARGELABELCATEGORY chargeLabelCategory ON (chargeLabelCategory.TENANT = chargeLabelDef.TENANT AND chargeLabelCategory.ID = chargeLabelDef.CHARGELABELCATEGORY)

			WHERE
				 /*tradein.ENTITYBUSINESSDATE BETWEEN {FromBusiDate} AND :toDate*/
				 :flag = 'P' AND
				 (
					(tradein.ENTITYBUSINESSDATE BETWEEN :fromDate AND :toDate and tradein.ENTITYBUSINESSDATE = tradein.CLEARINGDATE and tradein.ENTITYBUSINESSDATE = tradein.TRADEDATE AND tradein.STARTDATE = tradein.ENTITYBUSINESSDATE)
						OR
					(
						(tradein.tenant = tradeprocessing.tenant and tradein.ENTITYBUSINESSDATE BETWEEN :fromDate AND :toDate AND tradein.CLEARINGDATE < tradein.ENTITYBUSINESSDATE AND tradein.STARTDATE = tradein.ENTITYBUSINESSDATE)
							OR
						(tradein.tenant = tradeprocessing.tenant and tradein.CLEARINGDATE BETWEEN :fromDate AND :toDate AND tradein.TRADEDATE < tradein.CLEARINGDATE)
					)
				 )
				  AND(tradein.ENDACTION IS NULL OR tradein.ENDACTION <> 'DELETE')
				 AND tradein.PARTYACCOUNT = :accountId

			group by
				tradein.id,
				DMCF.TYPE,
				DMCF.CURRENCYCODE,
				chargeLabelCategory.NAME
		) trade
		JOIN DM_INSTRUMENT instrument ON instrument.ID = trade.INSTRUMENT AND instrument.tenant = trade.tenant
		JOIN DM_PRODUCT product ON product.ID = instrument.PRODUCTID AND product.tenant = trade.tenant
		JOIN DM_REGULATORYCATEGORY regcat ON regcat.ID = trade.REGULATORYCATEGORY AND regcat.tenant = trade.tenant
		JOIN DM_CURRENCY currencys ON currencys.ID = product.TRADEPRICECURRENCY AND currencys.tenant = trade.tenant
		LEFT JOIN DM_VALUATION valuation ON valuation.ENTITYBUSINESSDATE = trade.ENTITYBUSINESSDATE  AND valuation.TRADEID =  trade.ID AND valuation.VALUATIONMETHODTYPE = 'PREMIUM' AND valuation.TENANT = trade.tenant

	group by
		trade.ID,
		chargecurrency

	/*Cancel*/

	union all

	SELECT

		MAX(0) AS init,
		max(CASE WHEN dev.direction='BUY' THEN dev.quantity END) AS bQty,
		max(CASE WHEN dev.direction='SELL' THEN dev.quantity END) AS sQty,
		max(dev.ENTITYBUSINESSDATE) as businessDate,
		max(dev.contractDescription) as contractDescription,
		'Cancel' AS LEGEND,
		MAX(COALESCE(commissionCurrency,tradePriceCurCode)) AS tradePriceCurCode,
		MAX(optionPremiumRegCategory) AS optionPremiumRegCategory,
		(CASE WHEN (SUM(chargeAmount) = 0)
			THEN (MAX(CASE WHEN dev.OPTIONSETTLEMENTMETHOD = 'PREMIUM' AND dev.PRODUCTTYPE = 'OPTION' THEN optionPremiumAmount ELSE 0 END))
			ELSE (MAX(CASE WHEN dev.OPTIONSETTLEMENTMETHOD = 'PREMIUM' AND dev.PRODUCTTYPE = 'OPTION' AND commissionCurrency=tradePriceCurCode THEN optionPremiumAmount ELSE 0 END)- sum(chargeAmount))
            END )  as costOrProceeds

	FROM

	(
		select
		trade.ID AS ID,
		max(trade.ENTITYBUSINESSDATE) AS historicDate,
		max(trade.ENTITYBUSINESSDATE) AS ENTITYBUSINESSDATE,
		max(trade.DIRECTION) AS direction,
		max(trade.QUANTITY) AS quantity,
		max(trade.REGULATORYCATEGORYNAME) AS optionPremiumRegCategory,
      	MAX(
        CASE
        WHEN product.PRODUCTTYPE = 'FUTURE'
        THEN ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') )
        ELSE ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') || ' ' || COALESCE(instrument.STRIKEPRICE,0.0) || ' ' || COALESCE(instrument.OPTIONTYPE,''))
        END) AS contractDescription,

		max(currencys.CODE) AS tradePriceCurCode,
		max(currencys.CODE) AS optionPremiumCurrency,
		max(product.PRODUCTTYPE) as productType,
	        max(product.OPTIONSETTLEMENTMETHOD) as optionSettlementMethod,
		max(CASE WHEN product.PRODUCTTYPE = 'OPTION' AND product.OPTIONSETTLEMENTMETHOD='PREMIUM' THEN (valuation.VALUE)*(-1) ELSE 0 END) AS optionPremiumAmount,
		(CASE WHEN (DMCF.TYPE) in ('FEE', 'COM') THEN (sum(COALESCE(DMCF.AMOUNT,0))) ELSE 0 END)*(-1) AS chargeAmount,

		(CASE WHEN DMCF.TYPE = 'COM' THEN max(DMCF.CURRENCYCODE) ELSE NULL END) AS commissionCurrency

		from
		(
			select
				trade_history.ENTITYBUSINESSDATE,
				trade_history.ENTITYBUSINESSDATE as HISTORYENTITYBUSINESSDATE,
				trade_history.DIRECTION,
				trade_history.QUANTITY,
				trade_history.REGULATORYCATEGORYNAME,
				trade_history.EXCHANGENAME,
				trade_history.INSTRUMENT,
				trade_history.tenant,
				trade_history.ID,
				trade_history.USELOOKALIKEATTRIBUTE,
				trade_history.SENDINGFIRM
			FROM
				DM_DAILYHISTORY_TRADE trade_history
				JOIN DM_DAILYHISTORY_TRADE trade ON trade_history.id = trade.id AND trade_history.tenant = trade.tenant AND trade_history.ENDDATE < trade.STARTDATE and trade_history.PARTYACCOUNT = :accountId
				JOIN DM_DAILYHISTORY_TRADEPROCESSING tradeProcessing ON tradeProcessing.tenant = trade.tenant AND tradeProcessing.TRADEID = trade.ID AND tradeProcessing.STARTDATE = trade.STARTDATE AND tradeProcessing.CLEARINGSTATUS = 'CLEARED'
			WHERE
				:flag = 'P'
				AND trade_history.ENDDATE =(trade.STARTDATE - interval '1' day)
				AND trade_history.STARTDATE = trade_history.ENTITYBUSINESSDATE
				AND trade.STARTDATE = trade.ENTITYBUSINESSDATE
				AND trade.STARTDATE BETWEEN :fromDate AND :toDate
				AND trade.CLEARINGDATE <= trade.ENTITYBUSINESSDATE
				AND trade_history.ENDACTION = 'UPDATE'

			union all

			select
				tradeDeletedEvent.ENTITYBUSINESSDATE,
				trade.ENTITYBUSINESSDATE as HISTORYENTITYBUSINESSDATE,
				trade.DIRECTION,
				trade.QUANTITY,
				trade.REGULATORYCATEGORYNAME,
				trade.EXCHANGENAME,
				trade.INSTRUMENT,
				trade.tenant,
				trade.ID,
				trade.USELOOKALIKEATTRIBUTE,
				trade.SENDINGFIRM
			FROM
				DM_TRADEDELETEDEVENT tradeDeletedEvent
				JOIN DM_TRADE trade on trade.id = tradeDeletedEvent.trade AND trade.TENANT = tradeDeletedEvent.TENANT
				JOIN DM_TRADEPROCESSING tradeProcessing
					 ON tradeProcessing.tenant = tradeDeletedEvent.tenant
						AND tradeProcessing.TRADEID = tradeDeletedEvent.TRADE
						AND tradeProcessing.CLEARINGSTATUS = 'CLEARED'
			where
				:flag = 'P' AND
				trade.PARTYACCOUNT = :accountId AND
				tradeDeletedEvent.ENTITYBUSINESSDATE BETWEEN :fromDate AND :toDate
				AND tradeDeletedEvent.ENTITYBUSINESSDATE <> trade.ENTITYBUSINESSDATE
		)trade
		JOIN DM_INSTRUMENT instrument ON instrument.ID = trade.INSTRUMENT  AND instrument.tenant = trade.tenant
		JOIN DM_PRODUCT product ON product.ID = instrument.PRODUCTID AND product.tenant = trade.tenant
		JOIN DM_CURRENCY currencys ON currencys.ID = product.TRADEPRICECURRENCY AND currencys.tenant = trade.tenant
		LEFT JOIN DM_LEGALENTITY legalEntity ON legalEntity.ID = trade.SENDINGFIRM AND legalEntity.tenant = trade.tenant
		LEFT JOIN DM_COMMISSIONFEE_HISTORY DMCF ON DMCF.LEOENTITY = trade.ID
											AND trade.TENANT = DMCF.TENANT
											AND DMCF.ROOTCAUSEENTITYTYPE='Trade'
											AND DMCF.ENDDATE = trade.ENTITYBUSINESSDATE
											AND (DMCF.ENDDATE is NULL or DMCF.ENDDATE <> DMCF.STARTDATE)

		LEFT JOIN DM_VALUATION valuation ON valuation.ENTITYBUSINESSDATE = trade.HISTORYENTITYBUSINESSDATE AND valuation.TRADEID =  trade.ID AND valuation.VALUATIONMETHODTYPE = 'PREMIUM' AND valuation.TENANT = trade.tenant

		GROUP BY
		trade.ID,
		DMCF.TYPE


		)dev
		group by ID


	/*DELIVERY*/
	union all

	SELECT
		MAX(0) AS init,
		max(CASE WHEN trade.direction='BUY' THEN futureProcessingResult.quantity END) AS bQty,
		max(CASE WHEN trade.direction='SELL' THEN futureProcessingResult.quantity END) AS sQty,
		max(futureProcessingResult.SETTLEMENTDATE) as businessDate,

        MAX(
        CASE
        WHEN product.PRODUCTTYPE = 'FUTURE'
        THEN ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') )
        ELSE ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') || ' ' || COALESCE(instrument.STRIKEPRICE,0.0) || ' ' || COALESCE(instrument.OPTIONTYPE,''))
        END) AS contractDescription,

		max(case when futureProcessingResult.DELIVERYMETHOD ='CASH_SETTLEMENT' then 'Expiry'
			 when futureProcessingResult.DELIVERYMETHOD ='PHYSICAL_DELIVERY' then 'Delivery'
		END) AS LEGEND,
        MAX(COALESCE(DMCFFU.CURRENCYCODE,currencys.CODE)) AS tradePriceCurCode,
		MAX(regcat.NAME) AS optionPremiumRegCategory,

        (max(realizedPnL.VALUE) -
			sum(CASE WHEN (DMCFFU.TYPE) in ('FEE', 'COM') THEN (COALESCE(DMCFFU.AMOUNT,0)) ELSE 0 END)
		) as costOrProceeds

	FROM
		DM_FUTUREPROCESSINGRESULT futureProcessingResult
		JOIN DM_TRADE trade ON trade.ID = futureProcessingResult.TRADE AND trade.TENANT = futureProcessingResult.TENANT
		JOIN DM_INSTRUMENT instrument ON instrument.ID = trade.INSTRUMENT AND instrument.TENANT = trade.TENANT
		JOIN DM_PRODUCT product ON product.ID = instrument.PRODUCTID AND product.TENANT = trade.TENANT
		JOIN DM_CURRENCY currencys ON currencys.ID = product.SETTLEMENTCURRENCY AND currencys.TENANT = trade.TENANT
		JOIN DM_REGULATORYCATEGORY regcat ON regcat.ID = trade.REGULATORYCATEGORY AND regcat.tenant = trade.tenant
		LEFT JOIN DM_REALIZEDPNL realizedPnL ON realizedPnL.ID = futureProcessingResult.REALIZEDPNL AND instrument.TENANT = trade.TENANT AND realizedPnL.BUSINESSDATE = futureProcessingResult.SETTLEMENTDATE AND realizedPnL.TYPE='TradeSettlementRealizedPnL'
		LEFT JOIN DM_COMMISSIONFEE DMCFFU ON DMCFFU.ENTITYID = futureProcessingResult.ID AND DMCFFU.TENANT = futureProcessingResult.TENANT AND DMCFFU.ROOTCAUSEENTITYTYPE='FutureProcessingResult'
		LEFT JOIN DM_CHARGELABELDEFINITION chargeLabelDef ON (chargeLabelDef.TENANT = DMCFFU.TENANT AND chargeLabelDef.id = DMCFFU.CHARGELABELDEFINITION )
		LEFT JOIN DM_CHARGELABELCATEGORY chargeLabelCategory ON (chargeLabelCategory.TENANT = chargeLabelDef.TENANT AND chargeLabelCategory.ID = chargeLabelDef.CHARGELABELCATEGORY)

	WHERE
		:flag = 'P' AND
		futureProcessingResult.SETTLEMENTDATE BETWEEN :fromDate AND :toDate
		AND futureProcessingResult.DELIVERYMETHOD in ( 'CASH_SETTLEMENT', 'PHYSICAL_DELIVERY')
		AND trade.PARTYACCOUNT = :accountId

	group by
		trade.id,
        DMCFFU.CURRENCYCODE

	union all

	/*Exer/Assn, Expiry*/

	SELECT
		MAX(0) AS init,
		max(CASE WHEN trade.direction='BUY' THEN optionProcessingResult.quantity END) AS bQty,
		max(CASE WHEN trade.direction='SELL' THEN optionProcessingResult.quantity END) AS sQty,
		max(optionProcessingResult.BUSINESSDATE) as businessDate,
		MAX(
        CASE
        WHEN product.PRODUCTTYPE = 'FUTURE'
        THEN ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') )
        ELSE ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') || ' ' || COALESCE(instrument.STRIKEPRICE,0.0) || ' ' || COALESCE(instrument.OPTIONTYPE,''))
        END) AS contractDescription,

		max(case when optionProcessingResult.ACTION in ('ABANDONMENT','NON ASSIGNMENT','NON_ASSIGNMENT')then 'Expiry'
				 when optionProcessingResult.ACTION in ('EXERCISE','ASSIGNMENT') then 'Exer/Assn'  end
		)AS LEGEND,
		MAX(COALESCE(currencys.CODE,'')) AS tradePriceCurCode,
		MAX(regcat.NAME) AS optionPremiumRegCategory,

		(max(CASE WHEN optionProcessingResult.ACTION in ('EXERCISE','ASSIGNMENT') and product.OPTIONSETTLEMENTMETHOD = 'PREMIUM' and product.SETTLEMENTMETHOD = 'CASH_SETTLEMENT' and product.PRODUCTTYPE = 'OPTION' THEN realizedPnL.VALUE
				  WHEN optionProcessingResult.ACTION in ('EXERCISE','ASSIGNMENT') and product.OPTIONSETTLEMENTMETHOD <> 'PREMIUM' and valuation.VALUATIONMETHODTYPE = 'PREMIUM' AND product.PRODUCTTYPE = 'OPTION' THEN valuation.VALUE
		          WHEN optionProcessingResult.ACTION in ('EXERCISE','ASSIGNMENT') and product.OPTIONSETTLEMENTMETHOD = 'PREMIUM' and valuation.VALUATIONMETHODTYPE = 'PREMIUM' AND product.PRODUCTTYPE = 'OPTION' AND trade.ENTITYBUSINESSDATE < optionProcessingResult.BUSINESSDATE THEN valuation.VALUE
				  WHEN optionProcessingResult.ACTION in ('ABANDONMENT','NON ASSIGNMENT','NON_ASSIGNMENT') and product.OPTIONSETTLEMENTMETHOD <> 'PREMIUM' AND product.PRODUCTTYPE = 'OPTION' THEN valuation.VALUE
				  WHEN optionProcessingResult.ACTION in ('ABANDONMENT','NON ASSIGNMENT','NON_ASSIGNMENT') and product.OPTIONSETTLEMENTMETHOD = 'PREMIUM'  AND product.PRODUCTTYPE = 'OPTION' THEN valuation.VALUE
			      ELSE 0
		     END) -
			sum(CASE WHEN DMCFFU.TYPE IN ('FEE','COM') THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END)
			/*sum(CASE WHEN chargeLabelCategory.NAME = 'NFA Fee' AND DMCFFU.TYPE = 'FEE' THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END) -
			sum(CASE WHEN chargeLabelCategory.NAME = 'Exchange Fee' AND DMCFFU.TYPE = 'FEE' THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END) -
			sum(CASE WHEN chargeLabelCategory.NAME = 'Clearing Fee' AND DMCFFU.TYPE = 'FEE' THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END) -
			sum(CASE WHEN chargeLabelCategory.NAME = 'Give In Fee' AND DMCFFU.TYPE = 'FEE' THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END) -
			sum(CASE WHEN chargeLabelCategory.NAME = 'Brokerage Give Up Fee' AND DMCFFU.TYPE = 'FEE' THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END) -
			sum(CASE WHEN chargeLabelCategory.NAME = 'Exchange Give Up Fee' AND DMCFFU.TYPE = 'FEE' THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END) -
			sum(CASE WHEN chargeLabelCategory.NAME = 'Pit Brokerage' AND DMCFFU.TYPE = 'FEE' THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END) -
			sum(CASE WHEN chargeLabelCategory.NAME = 'Execution Commission' AND DMCFFU.TYPE = 'FEE' THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END) -
			sum(CASE WHEN chargeLabelCategory.NAME = 'Clearing Commission' AND DMCFFU.TYPE = 'FEE' THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END) -
			sum(CASE WHEN chargeLabelCategory.NAME = 'Broker Commission' AND DMCFFU.TYPE = 'FEE' THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END)		*/
		)  costOrProceeds

	FROM
		DM_OPTIONPROCESSINGRESULT optionProcessingResult
		JOIN DM_TRADE trade ON trade.ID = optionProcessingResult.TRADE AND optionProcessingResult.TENANT = trade.TENANT
		JOIN DM_INSTRUMENT instrument ON instrument.ID = trade.INSTRUMENT AND instrument.TENANT = trade.TENANT
		JOIN DM_PRODUCT product ON product.ID = instrument.PRODUCTID AND product.TENANT = trade.TENANT
		JOIN DM_REGULATORYCATEGORY regcat ON regcat.ID = trade.REGULATORYCATEGORY AND regcat.tenant = trade.tenant
		LEFT JOIN DM_CURRENCY currencys ON currencys.ID = product.SETTLEMENTCURRENCY AND currencys.TENANT = trade.TENANT
		LEFT JOIN DM_REALIZEDPNL realizedPnL ON instrument.TENANT = trade.TENANT AND realizedPnL.ID = optionProcessingResult.REALIZEDPNL AND (realizedPnL.BUSINESSDATE = optionProcessingResult.BUSINESSDATE) AND realizedPnL.TYPE='OptionProcessedRealizedPnl'
		LEFT JOIN DM_VALUATION valuation ON valuation.ENTITYBUSINESSDATE = optionProcessingResult.BUSINESSDATE AND valuation.TRADEID =  trade.ID AND valuation.VALUATIONMETHODTYPE = 'PREMIUM' AND valuation.TENANT = trade.tenant
		LEFT JOIN DM_COMMISSIONFEE DMCFFU ON DMCFFU.ENTITYID = optionProcessingResult.ID AND DMCFFU.TENANT = optionProcessingResult.TENANT  AND DMCFFU.ROOTCAUSEENTITYTYPE='OptionProcessingResult'
		LEFT JOIN DM_CHARGELABELDEFINITION chargeLabelDef ON (chargeLabelDef.TENANT = DMCFFU.TENANT AND chargeLabelDef.id = DMCFFU.CHARGELABELDEFINITION )
		LEFT JOIN DM_CHARGELABELCATEGORY chargeLabelCategory ON (chargeLabelCategory.TENANT = chargeLabelDef.TENANT AND chargeLabelCategory.ID = chargeLabelDef.CHARGELABELCATEGORY)

	WHERE
		:flag = 'P' AND
		optionProcessingResult.BUSINESSDATE BETWEEN :fromDate AND :toDate
		AND (optionProcessingResult.CANCELLATIONDATE IS NULL OR optionProcessingResult.CANCELLATIONDATE > :toDate)
		AND optionProcessingResult.ACTION in ('ABANDONMENT','NON ASSIGNMENT','NON_ASSIGNMENT','EXERCISE','ASSIGNMENT')
		AND trade.PARTYACCOUNT = :accountId

	group by
		trade.id

	union all

/*P&S*/

		SELECT
			0 AS init,
			(CASE WHEN trade.direction='BUY' THEN offsetPair.OFFSETQUANTITY END) AS bQty,
			(CASE WHEN trade.direction='SELL' THEN offsetPair.OFFSETQUANTITY END) AS sQty,
			offsetPair.BUSINESSDATE as businessDate,
            (CASE
        	WHEN product.PRODUCTTYPE = 'FUTURE'
        	THEN ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') )
        	ELSE ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') || ' ' || COALESCE(instrument.STRIKEPRICE,0.0) || ' ' || COALESCE(instrument.OPTIONTYPE,''))
        	END) AS contractDescription,
			'P&S' AS LEGEND,
			(currencys.CODE) AS tradePriceCurCode,
			(regcat.NAME) AS optionPremiumRegCategory,
			(realizedPnL.VALUE/2) as costOrProceeds

		FROM DM_OFFSETPAIR offsetPair
			JOIN DM_TRADE trade ON (trade.ID = offsetPair.BUYTRADE OR trade.ID = offsetPair.SELLTRADE) AND trade.TENANT = offsetPair.TENANT AND trade.PARTYACCOUNT = :accountId
			JOIN DM_INSTRUMENT instrument ON instrument.ID = trade.INSTRUMENT  AND instrument.TENANT = trade.TENANT
			JOIN DM_PRODUCT product ON product.ID = instrument.PRODUCTID AND product.TENANT = trade.TENANT
			JOIN DM_REGULATORYCATEGORY regcat ON regcat.ID = trade.REGULATORYCATEGORY AND regcat.tenant = trade.tenant
			JOIN DM_CURRENCY currencys ON currencys.ID = product.TRADEPRICECURRENCY AND currencys.TENANT = trade.TENANT
			LEFT JOIN DM_REALIZEDPNL realizedPnL ON realizedPnL.ID = offsetPair.REALIZEDPNL AND realizedPnL.TENANT = trade.TENANT AND realizedPnL.BUSINESSDATE = offsetPair.BUSINESSDATE AND realizedPnL.TYPE='OffsetPairRealizedPnL'

		WHERE
			:flag = 'P' AND
			offsetPair.BUSINESSDATE BETWEEN :fromDate AND :toDate AND
			(offsetPair.CANCELLATIONDATE IS NULL OR offsetPair.CANCELLATIONDATE > :toDate)


union all

/*P&S Rev*/
		SELECT
		    0 AS init,
			(CASE WHEN trade.direction='BUY' THEN offsetPair.OFFSETQUANTITY END) AS bQty,
			(CASE WHEN trade.direction='SELL' THEN offsetPair.OFFSETQUANTITY END) AS sQty,
			offsetPair.BUSINESSDATE as businessDate,
			 (CASE
        		WHEN product.PRODUCTTYPE = 'FUTURE'
        		THEN ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') )
        		ELSE ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') || ' ' || COALESCE(instrument.STRIKEPRICE,0.0) || ' ' || COALESCE(instrument.OPTIONTYPE,''))
        		END) AS contractDescription,
			'P&S Rev' AS LEGEND,
			(currencys.CODE) AS tradePriceCurCode,
			(regcat.NAME) AS optionPremiumRegCategory,
			(realizedPnL.VALUE/-2) as costOrProceeds

		FROM DM_OFFSETPAIR offsetPair

		    JOIN DM_DAILYHISTORY_TRADE trade ON offsetPair.tenant = trade.tenant
            AND (trade.ID = offsetPair.BUYTRADE OR trade.ID = offsetPair.SELLTRADE)
            AND trade.PARTYACCOUNT = :accountId
            AND trade.STARTDATE = offsetPair.CANCELLATIONDATE
			JOIN DM_INSTRUMENT instrument ON instrument.ID = trade.INSTRUMENT  AND instrument.TENANT = trade.TENANT
			JOIN DM_PRODUCT product ON product.ID = instrument.PRODUCTID AND product.TENANT = trade.TENANT
			JOIN DM_REGULATORYCATEGORY regcat ON regcat.ID = trade.REGULATORYCATEGORY AND regcat.tenant = trade.tenant
			JOIN DM_CURRENCY currencys ON currencys.ID = product.TRADEPRICECURRENCY AND currencys.TENANT = trade.TENANT
			LEFT JOIN DM_REALIZEDPNL realizedPnL ON realizedPnL.ID = offsetPair.REALIZEDPNL AND realizedPnL.TENANT = trade.TENANT AND realizedPnL.BUSINESSDATE = offsetPair.BUSINESSDATE AND realizedPnL.TYPE='OffsetPairRealizedPnL'

		WHERE
			:flag = 'P' AND
			offsetPair.CANCELLATIONDATE BETWEEN :fromDate AND :toDate AND offsetPair.BUSINESSDATE < :toDate


union all

	/*Collateral*/
	SELECT
		0 AS init,
		null AS bQty,
		null AS sQty,
		(TRANSACTIONDATE) as businessDate,
		MOVEMENTSUBTYPENAME AS contractDescription,
		'Collateral' AS LEGEND,
		(case when FROMACCOUNTID =  :accountId then FROMACCOUNTCURRENCYCODE else TOACCOUNTCURRENCYCODE END) AS tradePriceCurCode,
		(case when FROMACCOUNTID =  :accountId then FROMACCOUNTREGULATORYCATEGORY else TOACCOUNTREGULATORYCATEGORY END) AS optionPremiumRegCategory,
		CASE WHEN((TOACCOUNTID = :accountId AND DIRECTION = 'OUT' AND REVERSAL = 0)) THEN (AMOUNT)*(-1)
			WHEN((TOACCOUNTID = :accountId AND DIRECTION = 'IN'  AND REVERSAL = 0)) THEN AMOUNT
			WHEN((TOACCOUNTID = :accountId AND DIRECTION = 'OUT' AND REVERSAL = 1)) THEN AMOUNT
			WHEN((TOACCOUNTID = :accountId AND DIRECTION = 'IN'  AND REVERSAL = 1)) THEN (AMOUNT)*(-1)
		END AS costOrProceeds

	FROM
		DM_CASHMOVEMENT

	WHERE
		(BUSINESSDATE BETWEEN :fromDate AND :toDate OR COALESCE(LASTCHANGEDDATE, DATE '9999-01-01') BETWEEN :fromDate AND :toDate)
		AND MOVEMENTTYPENAME = 'Cover'
		AND (FROMACCOUNTID = :accountId OR TOACCOUNTID = :accountId)
		AND BUSINESSDATE <> coalesce(LASTCHANGEDDATE, DATE '9999-01-01')

	union all

	/*Adjust/Cash*/

	select
		0 AS init,
		null AS bQty,
		null AS sQty,
		BUSINESSDATE AS businessDate,
		MOVEMENTSUBTYPENAME AS contractDescription,
		CASE WHEN (MOVEMENTTYPENAME = 'Charge' OR MOVEMENTTYPENAME = 'Adjustment')  THEN 'Adjust'
			 WHEN MOVEMENTTYPENAME = 'Cash' then 'Cash'
		END AS LEGEND,
		(case when FROMACCOUNTID =  :accountId then FROMACCOUNTCURRENCYCODE else TOACCOUNTCURRENCYCODE END) AS tradePriceCurCode,
		(case when FROMACCOUNTID =  :accountId then FROMACCOUNTREGULATORYCATEGORY else TOACCOUNTREGULATORYCATEGORY END) AS optionPremiumRegCategory,
		case
			when MOVEMENTSUBTYPENAME in ('Account Cash Transfer','Regulatory Cash Transfer') and FROMACCOUNTID =  :accountId AND DMC.REVERSAL = 0 then AMOUNT * (-1)
			when MOVEMENTSUBTYPENAME in ('Account Cash Transfer','Regulatory Cash Transfer') and FROMACCOUNTID =  :accountId AND DMC.REVERSAL = 1 then AMOUNT

			when MOVEMENTSUBTYPENAME in ('Account Cash Transfer','Regulatory Cash Transfer') and TOACCOUNTID =  :accountId AND DMC.REVERSAL = 0  then AMOUNT
			when MOVEMENTSUBTYPENAME in ('Account Cash Transfer','Regulatory Cash Transfer') and TOACCOUNTID =  :accountId AND DMC.REVERSAL = 1  then AMOUNT * (-1)

			when MOVEMENTSUBTYPENAME not in ('Account Cash Transfer','Regulatory Cash Transfer') and direction = 'IN' AND REVERSAL = 0  then AMOUNT
			when MOVEMENTSUBTYPENAME not in ('Account Cash Transfer','Regulatory Cash Transfer') and direction = 'IN' AND REVERSAL = 1  then AMOUNT * (-1)

               when MOVEMENTSUBTYPENAME not in ('Account Cash Transfer','Regulatory Cash Transfer') and direction = 'OUT' AND REVERSAL = 0  then AMOUNT * (-1)
			when MOVEMENTSUBTYPENAME not in ('Account Cash Transfer','Regulatory Cash Transfer') and direction = 'OUT' AND REVERSAL = 1  then AMOUNT

    	END as costOrProceeds
	from DM_CASHMOVEMENT DMC
		 LEFT JOIN DM_MOVEMENTPREDEFINEDDESCRIPTION DMMPD on (DMC.tenant= DMMPD.tenant and DMC.MOVEMENTPREDEFINEDDESCRIPTION = DMMPD.id and DMC.MOVEMENTSUBTYPE = DMMPD.MOVEMENTSUBTYPE)
	where
			(BUSINESSDATE BETWEEN :fromDate AND :toDate or COALESCE(LASTCHANGEDDATE, DATE '9999-01-01')  BETWEEN :fromDate AND :toDate ) AND
			(FROMACCOUNTID =  :accountId OR TOACCOUNTID = :accountId) AND
			MOVEMENTTYPENAME IN ('Charge','Adjustment','Cash')
			AND upper(MOVEMENTSUBTYPENAME) NOT LIKE '%COUNTERPARTY%'
			AND BUSINESSDATE <> COALESCE(LASTCHANGEDDATE, DATE '9999-01-01') /*This condition is added because client doesent want to see record if reversal happened on same day*/


	union all

	select
		0 AS init,
		null AS bQty,
		null AS sQty,
		BUSINESSDATE AS businessDate,
		MOVEMENTSUBTYPENAME AS contractDescription,
          'Cash' AS LEGEND,
		(case when FROMACCOUNTID =  :accountId then FROMACCOUNTCURRENCYCODE else TOACCOUNTCURRENCYCODE END) AS CurrencyCode,
		(case when TOACCOUNTID =  :accountId then TOACCOUNTREGULATORYCATEGORY else FROMACCOUNTREGULATORYCATEGORY END) AS RegCat,
		case
			when FROMACCOUNTID =  :accountId AND REVERSAL = 0 then AMOUNT
			when FROMACCOUNTID =  :accountId AND REVERSAL = 1 then AMOUNT * (-1)

			when TOACCOUNTID =  :accountId AND REVERSAL = 0 then AMOUNT * (-1)
			when TOACCOUNTID =  :accountId AND REVERSAL = 1 then AMOUNT
		END as costOrProceeds

	from DM_CASHMOVEMENT DMC
		 LEFT JOIN DM_MOVEMENTPREDEFINEDDESCRIPTION DMMPD on (DMC.tenant= DMMPD.tenant and DMC.MOVEMENTPREDEFINEDDESCRIPTION = DMMPD.id and DMC.MOVEMENTSUBTYPE = DMMPD.MOVEMENTSUBTYPE)
	where
			(BUSINESSDATE  BETWEEN :fromDate AND :toDate or COALESCE(LASTCHANGEDDATE, DATE '9999-01-01')  BETWEEN :fromDate AND :toDate ) AND
			(FROMACCOUNTID =  :accountId OR TOACCOUNTID = :accountId) AND
			MOVEMENTSUBTYPENAME = 'Regulatory Cash Transfer'
			AND BUSINESSDATE <> COALESCE(LASTCHANGEDDATE, DATE '9999-01-01')


	/*Delivery Receipts (New Section added under STI-10197)*/
	UNION ALL

	SELECT
		0 AS init,
    		CASE WHEN deliveryReceipt.LONGORSHORT = 'LONG' THEN deliveryReceipt.QUANTITY END AS bQty,
		CASE WHEN deliveryReceipt.LONGORSHORT = 'SHORT' THEN deliveryReceipt.QUANTITY END AS sQty,
    		deliveryReceipt.BUSINESSDATE AS businessDate,
    		COALESCE(deliveryReceipt.DESCRIPTION, deliveryReceipt.INSTRUMENT) AS contractDescription,
    		'Receipt' AS LEGEND,
    		currency.CODE AS tradePriceCurCode,
    		'' AS optionPremiumRegCategory,
		deliveryReceipt.VALUATEDAMOUNT AS costOrProceeds
	FROM
		DM_DELIVERYRECEIPT  deliveryReceipt


	   	JOIN DM_CURRENCY  currency
    		ON currency.TENANT = deliveryReceipt.TENANT AND currency.ID = deliveryReceipt.CURRENCY

	WHERE
		deliveryReceipt.BUSINESSDATE BETWEEN :fromDate AND :toDate
		and deliveryReceipt.ACCOUNT	= :accountId
	/*Delivery Receipts (New Section added under STI-10197)*/

UNION ALL

	/*Exercise Reversal (New Section added under STI-10829)*/
	SELECT
	MAX(0) AS init,
	max(CASE WHEN trade.direction='BUY' THEN optionProcessingResult.quantity END) AS bQty,
	max(CASE WHEN trade.direction='SELL' THEN optionProcessingResult.quantity END) AS sQty,
	max(optionProcessingResult.CANCELLATIONDATE) as businessDate,
     MAX(
        CASE
        WHEN product.PRODUCTTYPE = 'FUTURE'
        THEN ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') )
        ELSE ((CASE WHEN trade.USELOOKALIKEATTRIBUTE = 'YES' THEN product.STATEMENTDESCRIPTION ELSE (COALESCE(trade.EXCHANGENAME,'') || ' ' || product.DESCRIPTION) END) || ' ' || COALESCE(instrument.MONTHMATURITYDATE,'') || ' ' || COALESCE(instrument.STRIKEPRICE,0.0) || ' ' || COALESCE(instrument.OPTIONTYPE,''))
        END) AS contractDescription,

	'Rv Ex/Assn'  AS LEGEND,
	MAX(COALESCE(currencys.CODE,'')) AS tradePriceCurCode,
	MAX(regcat.NAME) AS optionPremiumRegCategory,
	(max(CASE	WHEN optionProcessingResult.ACTION IN('EXERCISE','ASSIGNMENT') and product.OPTIONSETTLEMENTMETHOD = 'PREMIUM' and product.SETTLEMENTMETHOD = 'CASH_SETTLEMENT' and product.PRODUCTTYPE = 'OPTION' THEN realizedPnL.VALUE
				WHEN optionProcessingResult.ACTION IN('EXERCISE','ASSIGNMENT') and product.OPTIONSETTLEMENTMETHOD <> 'PREMIUM' and valuation.VALUATIONMETHODTYPE = 'PREMIUM' AND product.PRODUCTTYPE = 'OPTION' THEN valuation.VALUE
				WHEN optionProcessingResult.ACTION IN('EXERCISE','ASSIGNMENT') and product.OPTIONSETTLEMENTMETHOD = 'PREMIUM' and valuation.VALUATIONMETHODTYPE = 'PREMIUM' AND product.PRODUCTTYPE = 'OPTION' AND trade.ENTITYBUSINESSDATE < optionProcessingResult.BUSINESSDATE THEN valuation.VALUE
			ELSE 0
	 END)
	 -
	 sum(CASE WHEN DMCFFU.TYPE in ('FEE','COM')
					THEN (COALESCE(DMCFFU.AMOUNT,0))  ELSE 0 END)
	) * (-1) as costOrProceeds
	FROM
	DM_OPTIONPROCESSINGRESULT optionProcessingResult
	JOIN DM_TRADE trade ON trade.ID = optionProcessingResult.TRADE AND optionProcessingResult.TENANT = trade.TENANT AND trade.PARTYACCOUNT = :accountId
	JOIN DM_INSTRUMENT instrument ON instrument.ID = trade.INSTRUMENT AND instrument.TENANT = trade.TENANT
	JOIN DM_PRODUCT product ON product.ID = instrument.PRODUCTID AND product.TENANT = trade.TENANT
	JOIN DM_REGULATORYCATEGORY regcat ON regcat.ID = trade.REGULATORYCATEGORY AND regcat.tenant = trade.tenant
	LEFT JOIN DM_CURRENCY currencys ON currencys.ID = product.SETTLEMENTCURRENCY AND currencys.TENANT = trade.TENANT
	LEFT JOIN DM_REALIZEDPNL realizedPnL ON instrument.TENANT = trade.TENANT AND realizedPnL.ID = optionProcessingResult.REALIZEDPNL AND (realizedPnL.BUSINESSDATE = optionProcessingResult.BUSINESSDATE) AND realizedPnL.TYPE='OptionProcessedRealizedPnl'
	LEFT JOIN DM_VALUATION valuation ON  valuation.ENTITYBUSINESSDATE = optionProcessingResult.BUSINESSDATE AND valuation.TRADEID =  trade.ID AND valuation.VALUATIONMETHODTYPE = 'PREMIUM' AND valuation.TENANT = trade.tenant
	LEFT JOIN DM_COMMISSIONFEE_HISTORY DMCFFU ON DMCFFU.ENTITYBUSINESSDATE=optionProcessingResult.BUSINESSDATE AND DMCFFU.ENTITYID = optionProcessingResult.ID AND DMCFFU.TENANT = optionProcessingResult.TENANT  AND DMCFFU.ROOTCAUSEENTITYTYPE='OptionProcessingResult'
	WHERE
		:flag = 'P' AND
		optionProcessingResult.CANCELLATIONDATE IS NOT NULL AND optionProcessingResult.BUSINESSDATE < optionProcessingResult.CANCELLATIONDATE AND
		optionProcessingResult.CANCELLATIONDATE BETWEEN :fromDate AND :toDate AND optionProcessingResult.ACTION IN('EXERCISE','ASSIGNMENT')
	group by
		trade.id
	/*Exercise Reversal (New Section added under STI-10829)*/

	)temp

group by
    businessDate,
    contractDescription,
    LEGEND,
    tradePriceCurCode,
    optionPremiumRegCategory

ORDER BY
    optionPremiumRegCategory,
    tradePriceCurCode,
    businessDate,
    contractDescription,
    bQty,
    sQty,
    LEGEND,
    costOrProceeds
