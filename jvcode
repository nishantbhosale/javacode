SQLStream sqlStream = new SQLStream(dataSource);
Stream<ReportData> data = sqlStream.toStream(new SQLQuery(sql.toString(), map), rs -> {
    ReportData d = new ReportData();
    d.setBusinessDate(rs.getDate("BUSINESSDATE") != null ? rs.getDate("BUSINESSDATE").toLocalDate() : null);
    d.setCreation(rs.getTimestamp("CREATION") != null ? rs.getTimestamp("CREATION").toInstant() : null);
    d.setFormat(rs.getString("FORMAT"));
    d.setId(rs.getString("REPORT_ID"));
    d.setName(rs.getString("NAME"));
    d.setReportName(rs.getString("REPORTNAME"));
    d.setBackend(rs.getInt("BACKEND"));
    return d;
});

// Collect report data into a map to track duplicates
Map<String, ReportData> reportDataMap = new LinkedHashMap<>();
data.forEach(reportData -> reportDataMap.merge(reportData.getReportName(), reportData, (existing, replacement) -> {
    // Check backend condition only for duplicate entries
    if (replacement.getBackend() == 1) {
        return replacement;
    }
    return existing;
}));

// Filter unique report names based on the backend condition
List<ReportData> uniqueReportData = reportDataMap.values()
        .stream()
        .filter(reportData -> reportData.getBackend() == 1)
        .collect(Collectors.toList());

// Count the total unique report names satisfying the condition
int total = uniqueReportData.size();

return new ReportDataResult(total, uniqueReportData);
